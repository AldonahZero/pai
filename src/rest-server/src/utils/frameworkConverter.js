const base32 = require('base32');

const convertName = (name) => {
  // convert framework name to fit framework controller spec
  return name.toLowerCase().replace(/[^a-z0-9]/g, '');
};

const encodeName = (name) => {
  if (name.startsWith('unknown') || !name.includes('~')) {
    // framework is not generated by PAI
    return convertName(name.replace(/^unknown/g, ''));
  } else {
    // base32 encode
    return base32.encode(name);
  }
};

const decodeName = (name, labels) => {
  if (labels && labels.jobName) {
    return labels.jobName;
  } else {
    // framework name has not been encoded
    return name;
  }
};

const convertState = (state, exitCode, retryDelaySec) => {
  switch (state) {
    case 'AttemptCreationPending':
    case 'AttemptCreationRequested':
    case 'AttemptPreparing':
      return 'WAITING';
    case 'AttemptRunning':
    case 'AttemptDeletionPending':
    case 'AttemptDeletionRequested':
    case 'AttemptDeleting':
      return 'RUNNING';
    case 'AttemptCompleted':
      if (retryDelaySec == null) {
        return 'RUNNING';
      } else {
        return 'WAITING';
      }
    case 'Completed':
      if (exitCode === 0) {
        return 'SUCCEEDED';
      } else if (exitCode === -210 || exitCode === -220) {
        return 'STOPPED';
      } else {
        return 'FAILED';
      }
    default:
      return 'UNKNOWN';
  }
};

const convertToJobRetry = (framework) => {
  const completionStatus = framework.status.attemptStatus.completionStatus;
  return {
    name: decodeName(framework.metadata.name, framework.metadata.labels),
    frameworkName: framework.metadata.name,
    username: framework.metadata.labels
      ? framework.metadata.labels.userName
      : 'unknown',
    state: convertState(
      framework.status.state,
      completionStatus ? completionStatus.code : null,
      framework.status.retryPolicyStatus.retryDelaySec,
    ),
    originState: framework.status.state,
    retries: framework.status.retryPolicyStatus.totalRetriedCount,
    retryIndex: framework.status.attemptStatus.id,
    jobStartedTime: new Date(framework.metadata.creationTimestamp).getTime(),
    retryStartedTime: new Date(framework.metadata.creationTimestamp).getTime(),
    retryCompletedTime: new Date(framework.status.completionTime).getTime(),
    appExitCode: completionStatus ? completionStatus.code : null,
    virtualCluster: framework.metadata.labels
      ? framework.metadata.labels.virtualCluster
      : 'unknown',
    totalGpuNumber: framework.metadata.annotations
      ? framework.metadata.annotations.totalGpuNumber
      : 0,
    totalTaskNumber: framework.spec.taskRoles.reduce(
      (num, spec) => num + spec.taskNumber,
      0,
    ),
    totalTaskRoleNumber: framework.spec.taskRoles.length,
  };
};

// module exports
module.exports = {
  convertToJobRetry,
};
