#!/bin/sh

# Copyright (c) Microsoft Corporation
# All rights reserved.
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
# to permit persons to whom the Software is furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


# This script tries to behave like initd, will execute shell scripts under
# `/usr/local/pai/init`, main.sh will get a special treat: it will start after
# all other script and if main.sh exit this initd will kill all other processes in
# container.

PAI_DIR=/usr/local/pai
INIT_DIR=${PAI_DIR}/init
PAI_LOG_DIR=${PAI_DIR}/logs/${FC_POD_UID}

. $PAI_DIR/runtime_env.sh

for i in `find $INIT_DIR/ -type f -regex ".*.sh"` ; do
  file_name=`basename $i`
  if [ $file_name = "main.sh" ] ; then
    echo "skip main.sh for now"
    continue
  else
    echo "starting ${file_name}"
    $i > ${PAI_LOG_DIR}/${file_name}_init.log 2>&1 &
  fi
done

echo "starting main.sh"

LOG_PREFIX=${PAI_LOG_DIR}/user.pai
# Put verbose output to _user.pai.stdver, stdout to _user.pai.stdout, stderr to _user.pai.stderr
$INIT_DIR/main.sh > >(tee -a ${LOG_PREFIX}.stdout ${LOG_PREFIX}.stdver) 2> >(tee -a ${LOG_PREFIX}.stderr ${LOG_PREFIX}.stdver >&2) &

MAIN_PID=$!

echo "wait for main"
wait $MAIN_PID
